WHITESPACE = _{ " " }

KW_let = _{ "let" }
KW_fn = _{ "fn" }
KW_type = _{ "type" }
keyword = _{
    KW_let
  | KW_fn
  | KW_type
}

ident_char = _{ ASCII_ALPHANUMERIC | "_" }
ident      =  @{
    !keyword ~ ASCII_ALPHA ~ ident_char* 
  | !keyword ~ "_" ~ ident_char+ 
  | !keyword ~ "$" ~ ASCII_DIGIT?
}

plus  = { "+" }
minus = { "-" }
sign = { plus | minus }
int = @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
exp   = { "e" ~ (plus | minus)? ~ int }
number = @{ 
    sign?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ sign? ~ ASCII_DIGIT+)?
 }

true_lit  = { "true" }
false_lit = { "false" }
bool      = { true_lit | false_lit }

hex = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex = { hex{1, 6} }
predefined = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte       = { "x" ~ hex{2} }
unicode    = { "u" ~ "{" ~ unicode_hex ~ "}" }
escape     = { "\\" ~ (predefined | byte | unicode) }
raw_string = { (!("\\" | "\"") ~ ANY)+ }
string = { "\"" ~ (raw_string | escape)* ~ "\"" }
raw_chr = { escape | ANY }
chr = { "'" ~ (raw_chr) ~ "'" }

literal = {
    number | string | chr | bool
}

native_int  = { "int" }
native_float  = { "float" }
native_char = { "char" }
native_str = { "str" }

native = { native_int | native_float | native_char | native_str }

inc = { "++" }
dec = { "--" }

post_inc = { inc } 
post_dec = { dec }

field_access = { "." }
add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
pow = { "**" }
mod = { "%" }
and = { "&&" }
or = { "||" }
bit_and = { "&" }
bit_or = { "|" }
bit_xor = { "^" }
eq = { "==" }
neq = { "!=" }
greater = { ">" }
lesser = { "<" }
greater_eq = { ">=" }
lesser_eq = { "<=" }
assign = { "=" }
comma = { "," }

not = { "!" }
bit_not = { "~" }

infix = _{ 
    add
  | subtract
  | multiply
  | divide
  | pow
  | mod
  | and
  | or
  | bit_and
  | bit_or
  | bit_xor
  | field_access
  | eq
  | neq
  | greater
  | lesser
  | greater_eq
  | lesser_eq
  | assign
  | comma
}

prefix = _{
    inc
  | dec
  | plus
  | minus
  | not
  | bit_not
}


postfix = _{ post_inc | post_dec }

atom = _{ literal | ident | ("(" ~ expr ~ ")") }
primary = _{ prefix* ~ atom ~ postfix* }
// TODO: `call`s are weird, investigate making them "a normal expression"
call = { (infix_expr)  ~ "(" ~ expr? ~ ")" }
assignment = { 
    KW_let? ~ ident ~ ident? ~ "=" ~ expr
  | KW_let ~ ident ~ ident
}
infix_expr = { primary ~ (infix ~ primary)* }
expr = { 
    call
  | assignment
  | infix_expr 
}


stmt = {
    expr ~ ";"? ~ NEWLINE
}
stmts = {
    "{" ~ (NEWLINE* ~ stmt ~ NEWLINE*)* ~ "}"
    | expr
}

function_parameter = { 
  // name type | name | type
    ident ~ ident?
}
function_parameters = {
    ( "(" ~ (
        ((function_parameter ~ ",")+ ~ (function_parameter))
        | (function_parameter)?
    ) ~ ")" )?
}

function = { KW_fn ~ ident ~ function_parameters ~ ident? ~ "=>" ~ stmts ~ NEWLINE? }

field_definition = {
    ident ~ ident? ~ "=" ~ expr
  | ident ~ ident
}
type_internal  = _{
    field_definition
  | function
}

type_definition = { KW_type ~ ident ~ NEWLINE* ~ "{" ~ NEWLINE* ~ (type_internal~ NEWLINE*)* ~ NEWLINE* ~ "}" }

TL_ITEM = _{
    function
  | type_definition
}

file = {
    SOI 
    ~ (NEWLINE? ~ TL_ITEM ~ NEWLINE?)+
    ~ EOI
}